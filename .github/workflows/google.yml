name: Build and Deploy to GKE

on: workflow_dispatch

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  REGION: europe-west3
  TEMPLATE_PATH: gs://pub_sub_example/samples/dataflow/templates/word-count-streaming-beam.json
  TEMPLATE_IMAGE: gcr.io/${{ secrets.GKE_PROJECT }}/samples/dataflow/word-count-streaming-beam:latest
  JOB_STAGING_LOCATION: gs://pub_sub_example/tmp_dir
  INPUT_TOPIC: projects/${{ secrets.GKE_PROJECT }}/topics/job-topic
  JOB_NAME_PREFIX: dataflow-flextemplate-job

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'

      - name: Build with Maven
        working-directory: ./word-count-beam
        run: mvn --batch-mode --update-snapshots package -P dataflow-runner

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          service_account_email: ${{ secrets.GKE_SA_EMAIL }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: Build Job Template
        working-directory: ./word-count-beam
        run: |-
          gcloud dataflow flex-template build $TEMPLATE_PATH \
            --image-gcr-path $TEMPLATE_IMAGE \
            --sdk-language JAVA \
            --flex-template-base-image JAVA8 \
            --metadata-file ./spec/metadata.json \
            --jar ./target/word-count-beam-bundled-0.1.jar \
            --env FLEX_TEMPLATE_JAVA_MAIN_CLASS="org.apache.beam.examples.StreamingWordCount"

      - name: Get job ID
        id: get-job-id
        run: echo "::set-output name=job-id::$(gcloud dataflow jobs list --filter=$JOB_NAME_PREFIX --status=active --limit=1 --region=$REGION --format='get(JOB_ID)')"

      - name: Stop active job
        if: steps.get-job-id.outputs.job-id != ''
        run: gcloud dataflow jobs drain ${{ steps.get-job-id.outputs.job-id }} --region $REGION

      - name: Wait for job completion
        if: steps.get-job-id.outputs.job-id != ''
        run: |-
          while [ ! -z "$(gcloud dataflow jobs list --filter=$JOB_NAME_PREFIX --status=active --limit=1 --region=$REGION --format='get(JOB_ID)')" ]; do
            sleep 10s
          done

      - name: Start a new job
        id: start-job
        run: |-
          echo ::set-output name=job-id::$(gcloud dataflow flex-template run "$JOB_NAME_PREFIX-`date +%Y%m%d-%H%M%S`" \
              --template-file-gcs-location $TEMPLATE_PATH \
              --parameters inputTopic=$INPUT_TOPIC \
              --staging-location $JOB_STAGING_LOCATION \
              --region $REGION \
              --format="get(job.id)")

      - name: Wait for job start
        id: wait-job-start
        if: steps.start-job.outputs.job-id != ''
        run: |-
          function get_status() {
            echo "$(gcloud dataflow jobs show '${{ steps.start-job.outputs.job-id }}' --region=$REGION --format='get(state)')"
          }
          status="$(get_status)"
          while [[ "$status" == "Queued" || "$status" == "Starting" || "$status" == "Pending" ]]; do
            sleep 10s
            status="$(get_status)"
          done
          echo ::set-output name=job-status::"$(get_status)"

      - name: Check started job status
        run: |-
          if [[ "${{ steps.wait-job-start.outputs.job-status }}" != "Running" ]]
          then
            echo "Failed to start a job."
            exit 1
          else
            echo "Job with id '${{ steps.start-job.outputs.job-id }}' has been successfully started."
          fi
